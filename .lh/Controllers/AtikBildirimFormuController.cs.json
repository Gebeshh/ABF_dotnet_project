{
    "sourceFile": "Controllers/AtikBildirimFormuController.cs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748502195162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748502195162,
            "name": "Commit-0",
            "content": "using Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing System;\r\nusing System.Linq;\r\nusing System.Security.Claims;\r\nusing System.Threading.Tasks;\r\nusing TestNo_9999999.Data;\r\nusing TestNo_9999999.Models;\r\nusing TestNo_9999999.Services;\r\n\r\nnamespace TestNo_9999999.Controllers\r\n{\r\n    [Authorize] \r\n    public class AtikBildirimFormuController : Controller\r\n    {\r\n        private readonly AppDbContext _context;\r\n        private readonly AtikBildirimFormuService _abfService;\r\n        private readonly ExcelExportService _excelService;\r\n\r\n        public AtikBildirimFormuController(\r\n            AppDbContext context, \r\n            AtikBildirimFormuService abfService,\r\n            ExcelExportService excelService)\r\n        {\r\n            _context = context;\r\n            _abfService = abfService;\r\n            _excelService = excelService;\r\n        }\r\n\r\n        // GET: AtikBildirimFormu\r\n        public async Task<IActionResult> Index()\r\n        {\r\n            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            var isUSM = User.IsInRole(\"USM\");\r\n            var isDepo = User.IsInRole(\"DepoYetkilisi\");\r\n            var isAdmin = User.IsInRole(\"Admin\");\r\n\r\n            try\r\n            {\r\n                // Veritabanı sorgularını daha güvenli hale getirin\r\n                var forms = isUSM || isDepo || isAdmin\r\n                    ? await _context.AtikBildirimFormlari.AsNoTracking().OrderByDescending(a => a.Tarih).ToListAsync()\r\n                    : await _context.AtikBildirimFormlari\r\n                        .AsNoTracking()\r\n                        .Where(a => a.KisimAtikSorumlusuId == userId)\r\n                        .OrderByDescending(a => a.Tarih)\r\n                        .ToListAsync();\r\n\r\n                return View(forms);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                // Geçici bir çözüm olarak boş liste döndür\r\n                TempData[\"ErrorMessage\"] = \"Veritabanı bağlantısında bir sorun oluştu. Lütfen sistem yöneticisine başvurun.\";\r\n                return View(new List<AtikBildirimFormu>());\r\n            }\r\n        }\r\n\r\n        // GET: AtikBildirimFormu/Details/5\r\n        public async Task<IActionResult> Details(int? id)\r\n        {\r\n            if (id == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            var atikBildirimFormu = await _context.AtikBildirimFormlari\r\n                .FirstOrDefaultAsync(m => m.Id == id);\r\n            \r\n            if (atikBildirimFormu == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            return View(atikBildirimFormu);\r\n        }\r\n\r\n        // GET: AtikBildirimFormu/Create\r\n        public async Task<IActionResult> Create()\r\n        {\r\n            // Pre-fill form with user information\r\n            var userName = User.Identity != null ? User.Identity.Name : \"Unknown User\";\r\n            var department = User.FindFirstValue(\"Department\"); \r\n            if (string.IsNullOrEmpty(department))\r\n            {\r\n                // Department claim bulunamadı, alternatif çözüm\r\n                department = \"Bilinmeyen Departman\";\r\n            }\r\n            \r\n            // Generate a real kayıt no to show in the form\r\n            string kayitNo = await _abfService.GenerateKayitNoAsync();\r\n            \r\n            var model = new AtikBildirimFormu\r\n            {\r\n                Tarih = DateTime.Now,\r\n                GonderenKisi = userName != null ? userName : \"Bilinmeyen Kullanıcı\",\r\n                GonderenKisim = department,\r\n                KayitNo = kayitNo,\r\n                Durum = \"Onay Bekliyor\"\r\n            };\r\n\r\n            return View(model);\r\n        }\r\n\r\n        // POST: AtikBildirimFormu/Create\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Create(AtikBildirimFormu atikBildirimFormu)\r\n        {\r\n            if (string.IsNullOrEmpty(atikBildirimFormu.Durum))\r\n            {\r\n                atikBildirimFormu.Durum = \"Onay Bekliyor\";\r\n                ModelState.ClearValidationState(nameof(AtikBildirimFormu.Durum));\r\n                ModelState.MarkFieldValid(nameof(AtikBildirimFormu.Durum));\r\n            }\r\n            \r\n            // We're already setting the KayitNo in the GET action, so we don't need to generate it here\r\n            // But check if it's valid, if not, generate a new one\r\n            if (string.IsNullOrEmpty(atikBildirimFormu.KayitNo) || \r\n                !atikBildirimFormu.KayitNo.StartsWith(\"ABF-\"))\r\n            {\r\n                atikBildirimFormu.KayitNo = await _abfService.GenerateKayitNoAsync();\r\n            }\r\n            \r\n            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            if (userId == null)\r\n            {\r\n                ModelState.AddModelError(string.Empty, \"Kullanıcı kimliği bulunamadı.\");\r\n                return View(atikBildirimFormu);\r\n            }\r\n            atikBildirimFormu.KisimAtikSorumlusuId = userId;\r\n            \r\n            if (ModelState.IsValid)\r\n            {\r\n                _context.Add(atikBildirimFormu);\r\n                await _context.SaveChangesAsync();\r\n                TempData[\"SuccessMessage\"] = \"Form başarıyla oluşturuldu.\";\r\n                return RedirectToAction(nameof(Index));\r\n            }\r\n            \r\n            // Hataları bulalım ve kullanıcıya bilgi verelim\r\n            var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage);\r\n            foreach (var error in errors)\r\n            {\r\n                ModelState.AddModelError(string.Empty, error);\r\n            }\r\n            \r\n            return View(atikBildirimFormu);\r\n        }\r\n\r\n        // GET: AtikBildirimFormu/Edit/5\r\n        public async Task<IActionResult> Edit(int? id)\r\n        {\r\n            if (id == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            var atikBildirimFormu = await _context.AtikBildirimFormlari.FindAsync(id);\r\n            if (atikBildirimFormu == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n            \r\n            // Only allow editing of forms that are not approved\r\n            if (atikBildirimFormu.Durum != \"Hazırlanıyor\")\r\n            {\r\n                TempData[\"ErrorMessage\"] = \"Onaylanmış formlar düzenlenemez.\";\r\n                return RedirectToAction(nameof(Details), new { id = atikBildirimFormu.Id });\r\n            }\r\n\r\n            // Check if user is authorized to edit this form\r\n            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            if (atikBildirimFormu.KisimAtikSorumlusuId != userId && !User.IsInRole(\"Admin\"))\r\n            {\r\n                return Forbid();\r\n            }\r\n\r\n            return View(atikBildirimFormu);\r\n        }\r\n\r\n        // POST: AtikBildirimFormu/Edit/5\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Edit(int id, AtikBildirimFormu atikBildirimFormu)\r\n        {\r\n            if (id != atikBildirimFormu.Id)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            // Re-check if the form can be edited\r\n            var existingForm = await _context.AtikBildirimFormlari.AsNoTracking().FirstOrDefaultAsync(f => f.Id == id);\r\n            if (existingForm == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (existingForm.Durum != \"Hazırlanıyor\")\r\n            {\r\n                TempData[\"ErrorMessage\"] = \"Onaylanmış formlar düzenlenemez.\";\r\n                return RedirectToAction(nameof(Details), new { id = atikBildirimFormu.Id });\r\n            }\r\n\r\n            if (ModelState.IsValid)\r\n            {\r\n                try\r\n                {\r\n                    // Preserve original values that shouldn't change\r\n                    atikBildirimFormu.KayitNo = existingForm.KayitNo;\r\n                    atikBildirimFormu.Tarih = existingForm.Tarih;\r\n                    atikBildirimFormu.GonderenKisi = existingForm.GonderenKisi;\r\n                    atikBildirimFormu.GonderenKisim = existingForm.GonderenKisim;\r\n                    atikBildirimFormu.KisimAtikSorumlusuId = existingForm.KisimAtikSorumlusuId;\r\n\r\n                    _context.Update(atikBildirimFormu);\r\n                    await _context.SaveChangesAsync();\r\n                }\r\n                catch (DbUpdateConcurrencyException)\r\n                {\r\n                    if (!AtikBildirimFormuExists(atikBildirimFormu.Id))\r\n                    {\r\n                        return NotFound();\r\n                    }\r\n                    else\r\n                    {\r\n                        throw;\r\n                    }\r\n                }\r\n                return RedirectToAction(nameof(Index));\r\n            }\r\n            return View(atikBildirimFormu);\r\n        }\r\n\r\n        // POST: AtikBildirimFormu/Submit/5\r\n        [HttpPost]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Submit(int id)\r\n        {\r\n            var form = await _context.AtikBildirimFormlari.FindAsync(id);\r\n            if (form == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            // Check if user is authorized to submit this form\r\n            var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            if (form.KisimAtikSorumlusuId != userId && !User.IsInRole(\"Admin\"))\r\n            {\r\n                return Forbid();\r\n            }\r\n\r\n            if (form.Durum == \"Hazırlanıyor\")\r\n            {\r\n                form.Durum = \"Onay Bekliyor\";\r\n                _context.Update(form);\r\n                await _context.SaveChangesAsync();\r\n                TempData[\"SuccessMessage\"] = \"Form başarıyla onaya gönderildi.\";\r\n            }\r\n            else\r\n            {\r\n                TempData[\"ErrorMessage\"] = \"Bu form zaten onaya gönderilmiş.\";\r\n            }\r\n\r\n            return RedirectToAction(nameof(Details), new { id = form.Id });\r\n        }\r\n\r\n        // POST: AtikBildirimFormu/Approve/5\r\n        [HttpPost]\r\n        [Authorize(Roles = \"USM\")]\r\n        [ValidateAntiForgeryToken]\r\n        public async Task<IActionResult> Approve(int id)\r\n        {\r\n            var form = await _context.AtikBildirimFormlari.FindAsync(id);\r\n            if (form == null)\r\n            {\r\n                return NotFound();\r\n            }\r\n\r\n            if (form.Durum == \"Onay Bekliyor\")\r\n            {\r\n                form.Durum = \"Onaylandı\";\r\n                form.UsmPersoneli = User.Identity?.Name ?? \"Unknown User\";\r\n                var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n                if (userId == null)\r\n                {\r\n                    TempData[\"ErrorMessage\"] = \"Kullanıcı kimliği bulunamadı.\";\r\n                    return RedirectToAction(nameof(Details), new { id = form.Id });\r\n                }\r\n                form.UsmPersonelId = userId;\r\n                form.OnayTarihi = DateTime.Now;\r\n\r\n                if (form != null)\r\n                {\r\n                    _context.Update(form);\r\n                    await _context.SaveChangesAsync();\r\n                    TempData[\"SuccessMessage\"] = \"Form başarıyla onaylandı.\";\r\n                }\r\n            }\r\n            else\r\n            {\r\n                TempData[\"ErrorMessage\"] = \"Bu form onaylanamaz.\";\r\n            }\r\n\r\n            return RedirectToAction(nameof(Details), new { id = form?.Id ?? 0 });\r\n        }\r\n\r\n        // GET: AtikBildirimFormu/ExportToExcel\r\n        [Authorize(Roles = \"USM\")]\r\n        public async Task<IActionResult> ExportToExcel()\r\n        {\r\n            var forms = await _abfService.GetAllForExcelExportAsync();\r\n            var excelData = _excelService.ExportToExcel(forms);\r\n\r\n            return File(\r\n                excelData,\r\n                \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n                $\"AtikBildirimFormlari_{DateTime.Now:yyyyMMdd}.xlsx\");\r\n        }\r\n\r\n        private bool AtikBildirimFormuExists(int id)\r\n        {\r\n            return _context.AtikBildirimFormlari.Any(e => e.Id == id);\r\n        }\r\n    }\r\n}"
        }
    ]
}